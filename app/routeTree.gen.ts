/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as UsersUserIdImport } from './routes/users_.$userId'
import { Route as AuthSignUpSplatImport } from './routes/_auth.sign-up.$'
import { Route as AuthSignInSplatImport } from './routes/_auth.sign-in.$'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/users_/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignUpSplatRoute = AuthSignUpSplatImport.update({
  id: '/sign-up/$',
  path: '/sign-up/$',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignInSplatRoute = AuthSignInSplatImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/users_/$userId': {
      id: '/users_/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/_auth/sign-in/$': {
      id: '/_auth/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof AuthSignInSplatImport
      parentRoute: typeof AuthImport
    }
    '/_auth/sign-up/$': {
      id: '/_auth/sign-up/$'
      path: '/sign-up/$'
      fullPath: '/sign-up/$'
      preLoaderRoute: typeof AuthSignUpSplatImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthSignInSplatRoute: typeof AuthSignInSplatRoute
  AuthSignUpSplatRoute: typeof AuthSignUpSplatRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInSplatRoute: AuthSignInSplatRoute,
  AuthSignUpSplatRoute: AuthSignUpSplatRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/users': typeof UsersRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/sign-in/$': typeof AuthSignInSplatRoute
  '/sign-up/$': typeof AuthSignUpSplatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/users': typeof UsersRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/sign-in/$': typeof AuthSignInSplatRoute
  '/sign-up/$': typeof AuthSignUpSplatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/users': typeof UsersRoute
  '/users_/$userId': typeof UsersUserIdRoute
  '/_auth/sign-in/$': typeof AuthSignInSplatRoute
  '/_auth/sign-up/$': typeof AuthSignUpSplatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/users'
    | '/users/$userId'
    | '/sign-in/$'
    | '/sign-up/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/users' | '/users/$userId' | '/sign-in/$' | '/sign-up/$'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/users'
    | '/users_/$userId'
    | '/_auth/sign-in/$'
    | '/_auth/sign-up/$'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  UsersRoute: typeof UsersRoute
  UsersUserIdRoute: typeof UsersUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  UsersRoute: UsersRoute,
  UsersUserIdRoute: UsersUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/users",
        "/users_/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/sign-in/$",
        "/_auth/sign-up/$"
      ]
    },
    "/users": {
      "filePath": "users.tsx"
    },
    "/users_/$userId": {
      "filePath": "users_.$userId.tsx"
    },
    "/_auth/sign-in/$": {
      "filePath": "_auth.sign-in.$.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up/$": {
      "filePath": "_auth.sign-up.$.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
